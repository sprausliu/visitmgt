#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="vistor_mgt")]
public partial class VisitMgtDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region 可扩展性方法定义
  partial void OnCreated();
  partial void Insertvisit_main(visit_main instance);
  partial void Updatevisit_main(visit_main instance);
  partial void Deletevisit_main(visit_main instance);
  partial void Insertcert_type(cert_type instance);
  partial void Updatecert_type(cert_type instance);
  partial void Deletecert_type(cert_type instance);
  partial void Insertvisitor_cert(visitor_cert instance);
  partial void Updatevisitor_cert(visitor_cert instance);
  partial void Deletevisitor_cert(visitor_cert instance);
  partial void Insertgate(gate instance);
  partial void Updategate(gate instance);
  partial void Deletegate(gate instance);
  partial void Insertplant(plant instance);
  partial void Updateplant(plant instance);
  partial void Deleteplant(plant instance);
  partial void Insertrespondent(respondent instance);
  partial void Updaterespondent(respondent instance);
  partial void Deleterespondent(respondent instance);
  partial void Insertvisit_card(visit_card instance);
  partial void Updatevisit_card(visit_card instance);
  partial void Deletevisit_card(visit_card instance);
  partial void Insertvisitor(visitor instance);
  partial void Updatevisitor(visitor instance);
  partial void Deletevisitor(visitor instance);
  #endregion
	
	public VisitMgtDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["vistor_mgtConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public VisitMgtDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public VisitMgtDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public VisitMgtDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public VisitMgtDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<visit_main> visit_main
	{
		get
		{
			return this.GetTable<visit_main>();
		}
	}
	
	public System.Data.Linq.Table<cert_type> cert_type
	{
		get
		{
			return this.GetTable<cert_type>();
		}
	}
	
	public System.Data.Linq.Table<visitor_cert> visitor_cert
	{
		get
		{
			return this.GetTable<visitor_cert>();
		}
	}
	
	public System.Data.Linq.Table<gate> gate
	{
		get
		{
			return this.GetTable<gate>();
		}
	}
	
	public System.Data.Linq.Table<plant> plant
	{
		get
		{
			return this.GetTable<plant>();
		}
	}
	
	public System.Data.Linq.Table<respondent> respondent
	{
		get
		{
			return this.GetTable<respondent>();
		}
	}
	
	public System.Data.Linq.Table<visit_card> visit_card
	{
		get
		{
			return this.GetTable<visit_card>();
		}
	}
	
	public System.Data.Linq.Table<visitor> visitor
	{
		get
		{
			return this.GetTable<visitor>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.visit_main")]
public partial class visit_main : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _v_id;
	
	private int _v_gate;
	
	private string _v_card;
	
	private int _v_life;
	
	private int _v_visitor;
	
	private bool _v_hasID;
	
	private string _v_type;
	
	private string _v_reason;
	
	private System.Nullable<int> _v_nums;
	
	private string _v_entry;
	
	private System.Nullable<int> _v_respondent;
	
	private string _v_status;
	
	private System.Nullable<System.DateTime> _v_intime;
	
	private System.Nullable<System.DateTime> _v_outtime;
	
	private EntityRef<gate> _gate;
	
	private EntityRef<respondent> _respondent;
	
	private EntityRef<visit_card> _visit_card;
	
	private EntityRef<visitor> _visitor;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onv_idChanging(System.Guid value);
    partial void Onv_idChanged();
    partial void Onv_gateChanging(int value);
    partial void Onv_gateChanged();
    partial void Onv_cardChanging(string value);
    partial void Onv_cardChanged();
    partial void Onv_lifeChanging(int value);
    partial void Onv_lifeChanged();
    partial void Onv_visitorChanging(int value);
    partial void Onv_visitorChanged();
    partial void Onv_hasIDChanging(bool value);
    partial void Onv_hasIDChanged();
    partial void Onv_typeChanging(string value);
    partial void Onv_typeChanged();
    partial void Onv_reasonChanging(string value);
    partial void Onv_reasonChanged();
    partial void Onv_numsChanging(System.Nullable<int> value);
    partial void Onv_numsChanged();
    partial void Onv_entryChanging(string value);
    partial void Onv_entryChanged();
    partial void Onv_respondentChanging(System.Nullable<int> value);
    partial void Onv_respondentChanged();
    partial void Onv_statusChanging(string value);
    partial void Onv_statusChanged();
    partial void Onv_intimeChanging(System.Nullable<System.DateTime> value);
    partial void Onv_intimeChanged();
    partial void Onv_outtimeChanging(System.Nullable<System.DateTime> value);
    partial void Onv_outtimeChanged();
    #endregion
	
	public visit_main()
	{
		this._gate = default(EntityRef<gate>);
		this._respondent = default(EntityRef<respondent>);
		this._visit_card = default(EntityRef<visit_card>);
		this._visitor = default(EntityRef<visitor>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid v_id
	{
		get
		{
			return this._v_id;
		}
		set
		{
			if ((this._v_id != value))
			{
				this.Onv_idChanging(value);
				this.SendPropertyChanging();
				this._v_id = value;
				this.SendPropertyChanged("v_id");
				this.Onv_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_gate", DbType="Int NOT NULL")]
	public int v_gate
	{
		get
		{
			return this._v_gate;
		}
		set
		{
			if ((this._v_gate != value))
			{
				if (this._gate.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onv_gateChanging(value);
				this.SendPropertyChanging();
				this._v_gate = value;
				this.SendPropertyChanged("v_gate");
				this.Onv_gateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_card", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string v_card
	{
		get
		{
			return this._v_card;
		}
		set
		{
			if ((this._v_card != value))
			{
				if (this._visit_card.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onv_cardChanging(value);
				this.SendPropertyChanging();
				this._v_card = value;
				this.SendPropertyChanged("v_card");
				this.Onv_cardChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_life", DbType="Int NOT NULL")]
	public int v_life
	{
		get
		{
			return this._v_life;
		}
		set
		{
			if ((this._v_life != value))
			{
				this.Onv_lifeChanging(value);
				this.SendPropertyChanging();
				this._v_life = value;
				this.SendPropertyChanged("v_life");
				this.Onv_lifeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_visitor", DbType="Int NOT NULL")]
	public int v_visitor
	{
		get
		{
			return this._v_visitor;
		}
		set
		{
			if ((this._v_visitor != value))
			{
				if (this._visitor.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onv_visitorChanging(value);
				this.SendPropertyChanging();
				this._v_visitor = value;
				this.SendPropertyChanged("v_visitor");
				this.Onv_visitorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_hasID", DbType="Bit NOT NULL")]
	public bool v_hasID
	{
		get
		{
			return this._v_hasID;
		}
		set
		{
			if ((this._v_hasID != value))
			{
				this.Onv_hasIDChanging(value);
				this.SendPropertyChanging();
				this._v_hasID = value;
				this.SendPropertyChanged("v_hasID");
				this.Onv_hasIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_type", DbType="NVarChar(50)")]
	public string v_type
	{
		get
		{
			return this._v_type;
		}
		set
		{
			if ((this._v_type != value))
			{
				this.Onv_typeChanging(value);
				this.SendPropertyChanging();
				this._v_type = value;
				this.SendPropertyChanged("v_type");
				this.Onv_typeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_reason", DbType="NVarChar(100)")]
	public string v_reason
	{
		get
		{
			return this._v_reason;
		}
		set
		{
			if ((this._v_reason != value))
			{
				this.Onv_reasonChanging(value);
				this.SendPropertyChanging();
				this._v_reason = value;
				this.SendPropertyChanged("v_reason");
				this.Onv_reasonChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_nums", DbType="Int")]
	public System.Nullable<int> v_nums
	{
		get
		{
			return this._v_nums;
		}
		set
		{
			if ((this._v_nums != value))
			{
				this.Onv_numsChanging(value);
				this.SendPropertyChanging();
				this._v_nums = value;
				this.SendPropertyChanged("v_nums");
				this.Onv_numsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_entry", DbType="NVarChar(200)")]
	public string v_entry
	{
		get
		{
			return this._v_entry;
		}
		set
		{
			if ((this._v_entry != value))
			{
				this.Onv_entryChanging(value);
				this.SendPropertyChanging();
				this._v_entry = value;
				this.SendPropertyChanged("v_entry");
				this.Onv_entryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_respondent", DbType="Int")]
	public System.Nullable<int> v_respondent
	{
		get
		{
			return this._v_respondent;
		}
		set
		{
			if ((this._v_respondent != value))
			{
				if (this._respondent.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onv_respondentChanging(value);
				this.SendPropertyChanging();
				this._v_respondent = value;
				this.SendPropertyChanged("v_respondent");
				this.Onv_respondentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_status", DbType="VarChar(50)")]
	public string v_status
	{
		get
		{
			return this._v_status;
		}
		set
		{
			if ((this._v_status != value))
			{
				this.Onv_statusChanging(value);
				this.SendPropertyChanging();
				this._v_status = value;
				this.SendPropertyChanged("v_status");
				this.Onv_statusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_intime", DbType="DateTime")]
	public System.Nullable<System.DateTime> v_intime
	{
		get
		{
			return this._v_intime;
		}
		set
		{
			if ((this._v_intime != value))
			{
				this.Onv_intimeChanging(value);
				this.SendPropertyChanging();
				this._v_intime = value;
				this.SendPropertyChanged("v_intime");
				this.Onv_intimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v_outtime", DbType="DateTime")]
	public System.Nullable<System.DateTime> v_outtime
	{
		get
		{
			return this._v_outtime;
		}
		set
		{
			if ((this._v_outtime != value))
			{
				this.Onv_outtimeChanging(value);
				this.SendPropertyChanging();
				this._v_outtime = value;
				this.SendPropertyChanged("v_outtime");
				this.Onv_outtimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="gate_visit_main", Storage="_gate", ThisKey="v_gate", OtherKey="gate_id", IsForeignKey=true)]
	public gate gate
	{
		get
		{
			return this._gate.Entity;
		}
		set
		{
			gate previousValue = this._gate.Entity;
			if (((previousValue != value) 
						|| (this._gate.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._gate.Entity = null;
					previousValue.visit_main.Remove(this);
				}
				this._gate.Entity = value;
				if ((value != null))
				{
					value.visit_main.Add(this);
					this._v_gate = value.gate_id;
				}
				else
				{
					this._v_gate = default(int);
				}
				this.SendPropertyChanged("gate");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="respondent_visit_main", Storage="_respondent", ThisKey="v_respondent", OtherKey="respondent_id", IsForeignKey=true)]
	public respondent respondent
	{
		get
		{
			return this._respondent.Entity;
		}
		set
		{
			respondent previousValue = this._respondent.Entity;
			if (((previousValue != value) 
						|| (this._respondent.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._respondent.Entity = null;
					previousValue.visit_main.Remove(this);
				}
				this._respondent.Entity = value;
				if ((value != null))
				{
					value.visit_main.Add(this);
					this._v_respondent = value.respondent_id;
				}
				else
				{
					this._v_respondent = default(Nullable<int>);
				}
				this.SendPropertyChanged("respondent");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="visit_card_visit_main", Storage="_visit_card", ThisKey="v_card", OtherKey="c_id", IsForeignKey=true)]
	public visit_card visit_card
	{
		get
		{
			return this._visit_card.Entity;
		}
		set
		{
			visit_card previousValue = this._visit_card.Entity;
			if (((previousValue != value) 
						|| (this._visit_card.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._visit_card.Entity = null;
					previousValue.visit_main.Remove(this);
				}
				this._visit_card.Entity = value;
				if ((value != null))
				{
					value.visit_main.Add(this);
					this._v_card = value.c_id;
				}
				else
				{
					this._v_card = default(string);
				}
				this.SendPropertyChanged("visit_card");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="visitor_visit_main", Storage="_visitor", ThisKey="v_visitor", OtherKey="visitor_id", IsForeignKey=true)]
	public visitor visitor
	{
		get
		{
			return this._visitor.Entity;
		}
		set
		{
			visitor previousValue = this._visitor.Entity;
			if (((previousValue != value) 
						|| (this._visitor.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._visitor.Entity = null;
					previousValue.visit_main.Remove(this);
				}
				this._visitor.Entity = value;
				if ((value != null))
				{
					value.visit_main.Add(this);
					this._v_visitor = value.visitor_id;
				}
				else
				{
					this._v_visitor = default(int);
				}
				this.SendPropertyChanged("visitor");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cert_type")]
public partial class cert_type : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _cert_type_code;
	
	private string _cert_type_desc;
	
	private EntitySet<visitor_cert> _visitor_cert;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncert_type_codeChanging(string value);
    partial void Oncert_type_codeChanged();
    partial void Oncert_type_descChanging(string value);
    partial void Oncert_type_descChanged();
    #endregion
	
	public cert_type()
	{
		this._visitor_cert = new EntitySet<visitor_cert>(new Action<visitor_cert>(this.attach_visitor_cert), new Action<visitor_cert>(this.detach_visitor_cert));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cert_type_code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string cert_type_code
	{
		get
		{
			return this._cert_type_code;
		}
		set
		{
			if ((this._cert_type_code != value))
			{
				this.Oncert_type_codeChanging(value);
				this.SendPropertyChanging();
				this._cert_type_code = value;
				this.SendPropertyChanged("cert_type_code");
				this.Oncert_type_codeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cert_type_desc", DbType="NVarChar(50)")]
	public string cert_type_desc
	{
		get
		{
			return this._cert_type_desc;
		}
		set
		{
			if ((this._cert_type_desc != value))
			{
				this.Oncert_type_descChanging(value);
				this.SendPropertyChanging();
				this._cert_type_desc = value;
				this.SendPropertyChanged("cert_type_desc");
				this.Oncert_type_descChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cert_type_visitor_cert", Storage="_visitor_cert", ThisKey="cert_type_code", OtherKey="cert_type")]
	public EntitySet<visitor_cert> visitor_cert
	{
		get
		{
			return this._visitor_cert;
		}
		set
		{
			this._visitor_cert.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_visitor_cert(visitor_cert entity)
	{
		this.SendPropertyChanging();
		entity.cert_type1 = this;
	}
	
	private void detach_visitor_cert(visitor_cert entity)
	{
		this.SendPropertyChanging();
		entity.cert_type1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.visitor_cert")]
public partial class visitor_cert : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _cert_id;
	
	private System.Nullable<int> _cert_host;
	
	private string _cert_name;
	
	private string _cert_type;
	
	private string _cert_code;
	
	private System.Nullable<System.DateTime> _cert_exipred;
	
	private EntityRef<cert_type> _cert_type1;
	
	private EntityRef<visitor> _visitor;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncert_idChanging(System.Guid value);
    partial void Oncert_idChanged();
    partial void Oncert_hostChanging(System.Nullable<int> value);
    partial void Oncert_hostChanged();
    partial void Oncert_nameChanging(string value);
    partial void Oncert_nameChanged();
    partial void Oncert_typeChanging(string value);
    partial void Oncert_typeChanged();
    partial void Oncert_codeChanging(string value);
    partial void Oncert_codeChanged();
    partial void Oncert_exipredChanging(System.Nullable<System.DateTime> value);
    partial void Oncert_exipredChanged();
    #endregion
	
	public visitor_cert()
	{
		this._cert_type1 = default(EntityRef<cert_type>);
		this._visitor = default(EntityRef<visitor>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cert_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
	public System.Guid cert_id
	{
		get
		{
			return this._cert_id;
		}
		set
		{
			if ((this._cert_id != value))
			{
				this.Oncert_idChanging(value);
				this.SendPropertyChanging();
				this._cert_id = value;
				this.SendPropertyChanged("cert_id");
				this.Oncert_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cert_host", DbType="Int")]
	public System.Nullable<int> cert_host
	{
		get
		{
			return this._cert_host;
		}
		set
		{
			if ((this._cert_host != value))
			{
				if (this._visitor.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Oncert_hostChanging(value);
				this.SendPropertyChanging();
				this._cert_host = value;
				this.SendPropertyChanged("cert_host");
				this.Oncert_hostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cert_name", DbType="NVarChar(50)")]
	public string cert_name
	{
		get
		{
			return this._cert_name;
		}
		set
		{
			if ((this._cert_name != value))
			{
				this.Oncert_nameChanging(value);
				this.SendPropertyChanging();
				this._cert_name = value;
				this.SendPropertyChanged("cert_name");
				this.Oncert_nameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cert_type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string cert_type
	{
		get
		{
			return this._cert_type;
		}
		set
		{
			if ((this._cert_type != value))
			{
				if (this._cert_type1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Oncert_typeChanging(value);
				this.SendPropertyChanging();
				this._cert_type = value;
				this.SendPropertyChanged("cert_type");
				this.Oncert_typeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cert_code", DbType="NVarChar(50)")]
	public string cert_code
	{
		get
		{
			return this._cert_code;
		}
		set
		{
			if ((this._cert_code != value))
			{
				this.Oncert_codeChanging(value);
				this.SendPropertyChanging();
				this._cert_code = value;
				this.SendPropertyChanged("cert_code");
				this.Oncert_codeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cert_exipred", DbType="Date")]
	public System.Nullable<System.DateTime> cert_exipred
	{
		get
		{
			return this._cert_exipred;
		}
		set
		{
			if ((this._cert_exipred != value))
			{
				this.Oncert_exipredChanging(value);
				this.SendPropertyChanging();
				this._cert_exipred = value;
				this.SendPropertyChanged("cert_exipred");
				this.Oncert_exipredChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cert_type_visitor_cert", Storage="_cert_type1", ThisKey="cert_type", OtherKey="cert_type_code", IsForeignKey=true)]
	public cert_type cert_type1
	{
		get
		{
			return this._cert_type1.Entity;
		}
		set
		{
			cert_type previousValue = this._cert_type1.Entity;
			if (((previousValue != value) 
						|| (this._cert_type1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._cert_type1.Entity = null;
					previousValue.visitor_cert.Remove(this);
				}
				this._cert_type1.Entity = value;
				if ((value != null))
				{
					value.visitor_cert.Add(this);
					this._cert_type = value.cert_type_code;
				}
				else
				{
					this._cert_type = default(string);
				}
				this.SendPropertyChanged("cert_type1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="visitor_visitor_cert", Storage="_visitor", ThisKey="cert_host", OtherKey="visitor_id", IsForeignKey=true, DeleteRule="CASCADE")]
	public visitor visitor
	{
		get
		{
			return this._visitor.Entity;
		}
		set
		{
			visitor previousValue = this._visitor.Entity;
			if (((previousValue != value) 
						|| (this._visitor.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._visitor.Entity = null;
					previousValue.visitor_cert.Remove(this);
				}
				this._visitor.Entity = value;
				if ((value != null))
				{
					value.visitor_cert.Add(this);
					this._cert_host = value.visitor_id;
				}
				else
				{
					this._cert_host = default(Nullable<int>);
				}
				this.SendPropertyChanged("visitor");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.gate")]
public partial class gate : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _gate_id;
	
	private string _gate_name;
	
	private string _gate_plant;
	
	private EntitySet<visit_main> _visit_main;
	
	private EntityRef<plant> _plant;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongate_idChanging(int value);
    partial void Ongate_idChanged();
    partial void Ongate_nameChanging(string value);
    partial void Ongate_nameChanged();
    partial void Ongate_plantChanging(string value);
    partial void Ongate_plantChanged();
    #endregion
	
	public gate()
	{
		this._visit_main = new EntitySet<visit_main>(new Action<visit_main>(this.attach_visit_main), new Action<visit_main>(this.detach_visit_main));
		this._plant = default(EntityRef<plant>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gate_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int gate_id
	{
		get
		{
			return this._gate_id;
		}
		set
		{
			if ((this._gate_id != value))
			{
				this.Ongate_idChanging(value);
				this.SendPropertyChanging();
				this._gate_id = value;
				this.SendPropertyChanged("gate_id");
				this.Ongate_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gate_name", DbType="NVarChar(50)")]
	public string gate_name
	{
		get
		{
			return this._gate_name;
		}
		set
		{
			if ((this._gate_name != value))
			{
				this.Ongate_nameChanging(value);
				this.SendPropertyChanging();
				this._gate_name = value;
				this.SendPropertyChanged("gate_name");
				this.Ongate_nameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gate_plant", DbType="VarChar(50)")]
	public string gate_plant
	{
		get
		{
			return this._gate_plant;
		}
		set
		{
			if ((this._gate_plant != value))
			{
				if (this._plant.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ongate_plantChanging(value);
				this.SendPropertyChanging();
				this._gate_plant = value;
				this.SendPropertyChanged("gate_plant");
				this.Ongate_plantChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="gate_visit_main", Storage="_visit_main", ThisKey="gate_id", OtherKey="v_gate")]
	public EntitySet<visit_main> visit_main
	{
		get
		{
			return this._visit_main;
		}
		set
		{
			this._visit_main.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="plant_gate", Storage="_plant", ThisKey="gate_plant", OtherKey="plant_code", IsForeignKey=true)]
	public plant plant
	{
		get
		{
			return this._plant.Entity;
		}
		set
		{
			plant previousValue = this._plant.Entity;
			if (((previousValue != value) 
						|| (this._plant.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._plant.Entity = null;
					previousValue.gate.Remove(this);
				}
				this._plant.Entity = value;
				if ((value != null))
				{
					value.gate.Add(this);
					this._gate_plant = value.plant_code;
				}
				else
				{
					this._gate_plant = default(string);
				}
				this.SendPropertyChanged("plant");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_visit_main(visit_main entity)
	{
		this.SendPropertyChanging();
		entity.gate = this;
	}
	
	private void detach_visit_main(visit_main entity)
	{
		this.SendPropertyChanging();
		entity.gate = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.plant")]
public partial class plant : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _plant_code;
	
	private string _plant_name;
	
	private string _plant_name_en;
	
	private string _plant_address;
	
	private EntitySet<gate> _gate;
	
	private EntitySet<respondent> _respondent;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onplant_codeChanging(string value);
    partial void Onplant_codeChanged();
    partial void Onplant_nameChanging(string value);
    partial void Onplant_nameChanged();
    partial void Onplant_name_enChanging(string value);
    partial void Onplant_name_enChanged();
    partial void Onplant_addressChanging(string value);
    partial void Onplant_addressChanged();
    #endregion
	
	public plant()
	{
		this._gate = new EntitySet<gate>(new Action<gate>(this.attach_gate), new Action<gate>(this.detach_gate));
		this._respondent = new EntitySet<respondent>(new Action<respondent>(this.attach_respondent), new Action<respondent>(this.detach_respondent));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_plant_code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string plant_code
	{
		get
		{
			return this._plant_code;
		}
		set
		{
			if ((this._plant_code != value))
			{
				this.Onplant_codeChanging(value);
				this.SendPropertyChanging();
				this._plant_code = value;
				this.SendPropertyChanged("plant_code");
				this.Onplant_codeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_plant_name", DbType="NVarChar(255)")]
	public string plant_name
	{
		get
		{
			return this._plant_name;
		}
		set
		{
			if ((this._plant_name != value))
			{
				this.Onplant_nameChanging(value);
				this.SendPropertyChanging();
				this._plant_name = value;
				this.SendPropertyChanged("plant_name");
				this.Onplant_nameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_plant_name_en", DbType="VarChar(255)")]
	public string plant_name_en
	{
		get
		{
			return this._plant_name_en;
		}
		set
		{
			if ((this._plant_name_en != value))
			{
				this.Onplant_name_enChanging(value);
				this.SendPropertyChanging();
				this._plant_name_en = value;
				this.SendPropertyChanged("plant_name_en");
				this.Onplant_name_enChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_plant_address", DbType="NVarChar(200)")]
	public string plant_address
	{
		get
		{
			return this._plant_address;
		}
		set
		{
			if ((this._plant_address != value))
			{
				this.Onplant_addressChanging(value);
				this.SendPropertyChanging();
				this._plant_address = value;
				this.SendPropertyChanged("plant_address");
				this.Onplant_addressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="plant_gate", Storage="_gate", ThisKey="plant_code", OtherKey="gate_plant")]
	public EntitySet<gate> gate
	{
		get
		{
			return this._gate;
		}
		set
		{
			this._gate.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="plant_respondent", Storage="_respondent", ThisKey="plant_code", OtherKey="respondent_plant")]
	public EntitySet<respondent> respondent
	{
		get
		{
			return this._respondent;
		}
		set
		{
			this._respondent.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_gate(gate entity)
	{
		this.SendPropertyChanging();
		entity.plant = this;
	}
	
	private void detach_gate(gate entity)
	{
		this.SendPropertyChanging();
		entity.plant = null;
	}
	
	private void attach_respondent(respondent entity)
	{
		this.SendPropertyChanging();
		entity.plant = this;
	}
	
	private void detach_respondent(respondent entity)
	{
		this.SendPropertyChanging();
		entity.plant = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.respondent")]
public partial class respondent : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _respondent_id;
	
	private string _respondent_name;
	
	private string _respondent_plant;
	
	private string _respondent_dept;
	
	private string _respondent_tel;
	
	private string _respondent_tel2;
	
	private EntitySet<visit_main> _visit_main;
	
	private EntityRef<plant> _plant;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrespondent_idChanging(int value);
    partial void Onrespondent_idChanged();
    partial void Onrespondent_nameChanging(string value);
    partial void Onrespondent_nameChanged();
    partial void Onrespondent_plantChanging(string value);
    partial void Onrespondent_plantChanged();
    partial void Onrespondent_deptChanging(string value);
    partial void Onrespondent_deptChanged();
    partial void Onrespondent_telChanging(string value);
    partial void Onrespondent_telChanged();
    partial void Onrespondent_tel2Changing(string value);
    partial void Onrespondent_tel2Changed();
    #endregion
	
	public respondent()
	{
		this._visit_main = new EntitySet<visit_main>(new Action<visit_main>(this.attach_visit_main), new Action<visit_main>(this.detach_visit_main));
		this._plant = default(EntityRef<plant>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_respondent_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int respondent_id
	{
		get
		{
			return this._respondent_id;
		}
		set
		{
			if ((this._respondent_id != value))
			{
				this.Onrespondent_idChanging(value);
				this.SendPropertyChanging();
				this._respondent_id = value;
				this.SendPropertyChanged("respondent_id");
				this.Onrespondent_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_respondent_name", DbType="NVarChar(50)")]
	public string respondent_name
	{
		get
		{
			return this._respondent_name;
		}
		set
		{
			if ((this._respondent_name != value))
			{
				this.Onrespondent_nameChanging(value);
				this.SendPropertyChanging();
				this._respondent_name = value;
				this.SendPropertyChanged("respondent_name");
				this.Onrespondent_nameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_respondent_plant", DbType="VarChar(50)")]
	public string respondent_plant
	{
		get
		{
			return this._respondent_plant;
		}
		set
		{
			if ((this._respondent_plant != value))
			{
				if (this._plant.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onrespondent_plantChanging(value);
				this.SendPropertyChanging();
				this._respondent_plant = value;
				this.SendPropertyChanged("respondent_plant");
				this.Onrespondent_plantChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_respondent_dept", DbType="NVarChar(50)")]
	public string respondent_dept
	{
		get
		{
			return this._respondent_dept;
		}
		set
		{
			if ((this._respondent_dept != value))
			{
				this.Onrespondent_deptChanging(value);
				this.SendPropertyChanging();
				this._respondent_dept = value;
				this.SendPropertyChanged("respondent_dept");
				this.Onrespondent_deptChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_respondent_tel", DbType="VarChar(50)")]
	public string respondent_tel
	{
		get
		{
			return this._respondent_tel;
		}
		set
		{
			if ((this._respondent_tel != value))
			{
				this.Onrespondent_telChanging(value);
				this.SendPropertyChanging();
				this._respondent_tel = value;
				this.SendPropertyChanged("respondent_tel");
				this.Onrespondent_telChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_respondent_tel2", DbType="VarChar(50)")]
	public string respondent_tel2
	{
		get
		{
			return this._respondent_tel2;
		}
		set
		{
			if ((this._respondent_tel2 != value))
			{
				this.Onrespondent_tel2Changing(value);
				this.SendPropertyChanging();
				this._respondent_tel2 = value;
				this.SendPropertyChanged("respondent_tel2");
				this.Onrespondent_tel2Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="respondent_visit_main", Storage="_visit_main", ThisKey="respondent_id", OtherKey="v_respondent")]
	public EntitySet<visit_main> visit_main
	{
		get
		{
			return this._visit_main;
		}
		set
		{
			this._visit_main.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="plant_respondent", Storage="_plant", ThisKey="respondent_plant", OtherKey="plant_code", IsForeignKey=true)]
	public plant plant
	{
		get
		{
			return this._plant.Entity;
		}
		set
		{
			plant previousValue = this._plant.Entity;
			if (((previousValue != value) 
						|| (this._plant.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._plant.Entity = null;
					previousValue.respondent.Remove(this);
				}
				this._plant.Entity = value;
				if ((value != null))
				{
					value.respondent.Add(this);
					this._respondent_plant = value.plant_code;
				}
				else
				{
					this._respondent_plant = default(string);
				}
				this.SendPropertyChanged("plant");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_visit_main(visit_main entity)
	{
		this.SendPropertyChanging();
		entity.respondent = this;
	}
	
	private void detach_visit_main(visit_main entity)
	{
		this.SendPropertyChanging();
		entity.respondent = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.visit_card")]
public partial class visit_card : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _c_id;
	
	private string _c_desc;
	
	private int _c_type;
	
	private EntitySet<visit_main> _visit_main;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onc_idChanging(string value);
    partial void Onc_idChanged();
    partial void Onc_descChanging(string value);
    partial void Onc_descChanged();
    partial void Onc_typeChanging(int value);
    partial void Onc_typeChanged();
    #endregion
	
	public visit_card()
	{
		this._visit_main = new EntitySet<visit_main>(new Action<visit_main>(this.attach_visit_main), new Action<visit_main>(this.detach_visit_main));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_c_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string c_id
	{
		get
		{
			return this._c_id;
		}
		set
		{
			if ((this._c_id != value))
			{
				this.Onc_idChanging(value);
				this.SendPropertyChanging();
				this._c_id = value;
				this.SendPropertyChanged("c_id");
				this.Onc_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_c_desc", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string c_desc
	{
		get
		{
			return this._c_desc;
		}
		set
		{
			if ((this._c_desc != value))
			{
				this.Onc_descChanging(value);
				this.SendPropertyChanging();
				this._c_desc = value;
				this.SendPropertyChanged("c_desc");
				this.Onc_descChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_c_type", DbType="Int NOT NULL")]
	public int c_type
	{
		get
		{
			return this._c_type;
		}
		set
		{
			if ((this._c_type != value))
			{
				this.Onc_typeChanging(value);
				this.SendPropertyChanging();
				this._c_type = value;
				this.SendPropertyChanged("c_type");
				this.Onc_typeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="visit_card_visit_main", Storage="_visit_main", ThisKey="c_id", OtherKey="v_card")]
	public EntitySet<visit_main> visit_main
	{
		get
		{
			return this._visit_main;
		}
		set
		{
			this._visit_main.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_visit_main(visit_main entity)
	{
		this.SendPropertyChanging();
		entity.visit_card = this;
	}
	
	private void detach_visit_main(visit_main entity)
	{
		this.SendPropertyChanging();
		entity.visit_card = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.visitor")]
public partial class visitor : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _visitor_id;
	
	private string _visitor_name;
	
	private string _visitor_sex;
	
	private System.Nullable<System.DateTime> _visitor_lastcheck;
	
	private EntitySet<visit_main> _visit_main;
	
	private EntitySet<visitor_cert> _visitor_cert;
	
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onvisitor_idChanging(int value);
    partial void Onvisitor_idChanged();
    partial void Onvisitor_nameChanging(string value);
    partial void Onvisitor_nameChanged();
    partial void Onvisitor_sexChanging(string value);
    partial void Onvisitor_sexChanged();
    partial void Onvisitor_lastcheckChanging(System.Nullable<System.DateTime> value);
    partial void Onvisitor_lastcheckChanged();
    #endregion
	
	public visitor()
	{
		this._visit_main = new EntitySet<visit_main>(new Action<visit_main>(this.attach_visit_main), new Action<visit_main>(this.detach_visit_main));
		this._visitor_cert = new EntitySet<visitor_cert>(new Action<visitor_cert>(this.attach_visitor_cert), new Action<visitor_cert>(this.detach_visitor_cert));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visitor_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int visitor_id
	{
		get
		{
			return this._visitor_id;
		}
		set
		{
			if ((this._visitor_id != value))
			{
				this.Onvisitor_idChanging(value);
				this.SendPropertyChanging();
				this._visitor_id = value;
				this.SendPropertyChanged("visitor_id");
				this.Onvisitor_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visitor_name", DbType="NVarChar(50)")]
	public string visitor_name
	{
		get
		{
			return this._visitor_name;
		}
		set
		{
			if ((this._visitor_name != value))
			{
				this.Onvisitor_nameChanging(value);
				this.SendPropertyChanging();
				this._visitor_name = value;
				this.SendPropertyChanged("visitor_name");
				this.Onvisitor_nameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visitor_sex", DbType="VarChar(2)")]
	public string visitor_sex
	{
		get
		{
			return this._visitor_sex;
		}
		set
		{
			if ((this._visitor_sex != value))
			{
				this.Onvisitor_sexChanging(value);
				this.SendPropertyChanging();
				this._visitor_sex = value;
				this.SendPropertyChanged("visitor_sex");
				this.Onvisitor_sexChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visitor_lastcheck", DbType="Date")]
	public System.Nullable<System.DateTime> visitor_lastcheck
	{
		get
		{
			return this._visitor_lastcheck;
		}
		set
		{
			if ((this._visitor_lastcheck != value))
			{
				this.Onvisitor_lastcheckChanging(value);
				this.SendPropertyChanging();
				this._visitor_lastcheck = value;
				this.SendPropertyChanged("visitor_lastcheck");
				this.Onvisitor_lastcheckChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="visitor_visit_main", Storage="_visit_main", ThisKey="visitor_id", OtherKey="v_visitor")]
	public EntitySet<visit_main> visit_main
	{
		get
		{
			return this._visit_main;
		}
		set
		{
			this._visit_main.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="visitor_visitor_cert", Storage="_visitor_cert", ThisKey="visitor_id", OtherKey="cert_host")]
	public EntitySet<visitor_cert> visitor_cert
	{
		get
		{
			return this._visitor_cert;
		}
		set
		{
			this._visitor_cert.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_visit_main(visit_main entity)
	{
		this.SendPropertyChanging();
		entity.visitor = this;
	}
	
	private void detach_visit_main(visit_main entity)
	{
		this.SendPropertyChanging();
		entity.visitor = null;
	}
	
	private void attach_visitor_cert(visitor_cert entity)
	{
		this.SendPropertyChanging();
		entity.visitor = this;
	}
	
	private void detach_visitor_cert(visitor_cert entity)
	{
		this.SendPropertyChanging();
		entity.visitor = null;
	}
}
#pragma warning restore 1591
